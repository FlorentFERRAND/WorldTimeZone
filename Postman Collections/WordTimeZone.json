{
	"info": {
		"_postman_id": "e75f6d92-4586-47c4-8f3b-13986217c4ff",
		"name": "WorldTimeZone",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1.0. WeekInProgress",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7c19e46-fa02-4423-bf1b-72b65e5151c5",
						"exec": [
							"pm.expect(pm.response.code).to.eql(200) ? pm.test(\"OK\") : pm.test(\"KO\");\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data type of the response\", function() {\r",
							"    var data = JSON.parse(responseBody);\r",
							"        pm.expect(data).to.have.all.keys('abbreviation', 'client_ip','datetime', 'day_of_week', 'day_of_year','dst','dst_from','dst_offset','dst_until','raw_offset','timezone','unixtime','utc_datetime','utc_offset','week_number');\r",
							"        pm.expect(data.abbreviation).to.be.a(\"string\");\r",
							"        pm.expect(data.client_ip).to.be.a(\"string\");\r",
							"        pm.expect(data.datetime).to.be.a(\"string\");\r",
							"        pm.expect(data.day_of_week).to.be.a(\"number\");\r",
							"        pm.expect(data.day_of_year).to.be.a(\"number\");\r",
							"        pm.expect(data.timezone).to.be.a(\"string\");\r",
							"        pm.expect(data.week_number).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.stream.length > 0 ? pm.response.json() : \"\";\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.datetime\r",
							"    ? \"datetime found: \" + jsonData.datetime\r",
							"    : \"datetime not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.datetime).not.eq(undefined);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.day_of_week\r",
							"    ? \"day_of_week found: \" + jsonData.day_of_week\r",
							"    : \"day_of_week not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.day_of_week).not.eq(undefined);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.day_of_year\r",
							"    ? \"day_of_year found: \" + jsonData.day_of_year\r",
							"    : \"day_of_year not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.day_of_year).not.eq(undefined);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.day_of_year\r",
							"    ? \"day_of_year found: \" + jsonData.day_of_year\r",
							"    : \"day_of_year not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.day_of_year).not.eq(undefined);\r",
							"        pm.environment.set('day_of_year', jsonData.day_of_year);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.timezone\r",
							"    ? \"timezone found: \" + jsonData.timezone\r",
							"    : \"timezone not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.timezone).not.eq(undefined);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"if (pm.response.code == 200) {\r",
							"    pm.test(!!jsonData && !!jsonData.week_number\r",
							"    ? \"week_number found: \" + \"S\" + jsonData.week_number\r",
							"    : \"week_number not found\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"        pm.expect(jsonData).not.eq(undefined);\r",
							"        pm.expect(jsonData.week_number).not.eq(undefined);\r",
							"    });\r",
							"}\r",
							"else {\r",
							"    pm.test(!!jsonData.error || !!jsonData.errorMessage ? \"Error \"\r",
							"        + pm.response.code + \": \"\r",
							"        + (jsonData.error || \"\")\r",
							"        + (jsonData.errorMessage || \"\")\r",
							"    : \"Error \" + pm.response.code, function () {\r",
							"        pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"    });\r",
							"}\r",
							"\r",
							"var myInt = parseInt(pm.environment.get('last_day_of_year'));\r",
							"var myInt2 = parseInt(pm.environment.get('day_of_year'));\r",
							"if (pm.response.code == 200) {\r",
							"    if(!NaN) {\r",
							"        pm.test(\"Day left before the last day of the year: \" + (myInt - myInt2));\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "92c7d68f-1291-4943-a067-3380c7d4e01e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrlTime}}"
			},
			"response": []
		}
	]
}